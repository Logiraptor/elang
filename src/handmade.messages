prog: LET ID ID LPAREN ID ID COMMA RPAREN 
##
## Ends in an error in state: 29.
##
## separated_nonempty_list(COMMA,arg) -> arg COMMA . separated_nonempty_list(COMMA,arg) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## arg COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN ID ID PLUS 
##
## Ends in an error in state: 28.
##
## separated_nonempty_list(COMMA,arg) -> arg . [ RPAREN ]
## separated_nonempty_list(COMMA,arg) -> arg . COMMA separated_nonempty_list(COMMA,arg) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## arg 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN ID RPAREN 
##
## Ends in an error in state: 6.
##
## arg -> ID . typ [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN PLUS 
##
## Ends in an error in state: 5.
##
## func -> LET typ ID LPAREN . args RPAREN EQUAL value [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET typ ID LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT EQUAL INT INT 
##
## Ends in an error in state: 21.
##
## value -> value . PLUS value [ RPAREN PLUS LPAREN LET EQUAL EOF COMMA ]
## value -> value . EQUAL value [ RPAREN PLUS LPAREN LET EQUAL EOF COMMA ]
## value -> value EQUAL value . [ RPAREN PLUS LPAREN LET EQUAL EOF COMMA ]
## value -> value . LPAREN params RPAREN [ RPAREN PLUS LPAREN LET EQUAL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## value EQUAL value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT EQUAL RPAREN 
##
## Ends in an error in state: 20.
##
## value -> value EQUAL . value [ RPAREN PLUS LPAREN LET EQUAL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## value EQUAL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT LPAREN INT COMMA RPAREN 
##
## Ends in an error in state: 22.
##
## separated_nonempty_list(COMMA,value) -> value COMMA . separated_nonempty_list(COMMA,value) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## value COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT LPAREN INT LET 
##
## Ends in an error in state: 19.
##
## separated_nonempty_list(COMMA,value) -> value . [ RPAREN ]
## separated_nonempty_list(COMMA,value) -> value . COMMA separated_nonempty_list(COMMA,value) [ RPAREN ]
## value -> value . PLUS value [ RPAREN PLUS LPAREN EQUAL COMMA ]
## value -> value . EQUAL value [ RPAREN PLUS LPAREN EQUAL COMMA ]
## value -> value . LPAREN params RPAREN [ RPAREN PLUS LPAREN EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT LPAREN PLUS 
##
## Ends in an error in state: 18.
##
## value -> value LPAREN . params RPAREN [ RPAREN PLUS LPAREN LET EQUAL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## value LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT PLUS INT INT 
##
## Ends in an error in state: 17.
##
## value -> value . PLUS value [ RPAREN PLUS LPAREN LET EQUAL EOF COMMA ]
## value -> value PLUS value . [ RPAREN PLUS LPAREN LET EQUAL EOF COMMA ]
## value -> value . EQUAL value [ RPAREN PLUS LPAREN LET EQUAL EOF COMMA ]
## value -> value . LPAREN params RPAREN [ RPAREN PLUS LPAREN LET EQUAL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## value PLUS value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT PLUS RPAREN 
##
## Ends in an error in state: 16.
##
## value -> value PLUS . value [ RPAREN PLUS LPAREN LET EQUAL EOF COMMA ]
##
## The known suffix of the stack is as follows:
## value PLUS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT RPAREN 
##
## Ends in an error in state: 15.
##
## func -> LET typ ID LPAREN args RPAREN EQUAL value . [ LET EOF ]
## value -> value . PLUS value [ PLUS LPAREN LET EQUAL EOF ]
## value -> value . EQUAL value [ PLUS LPAREN LET EQUAL EOF ]
## value -> value . LPAREN params RPAREN [ PLUS LPAREN LET EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## LET typ ID LPAREN args RPAREN EQUAL value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL RPAREN 
##
## Ends in an error in state: 12.
##
## func -> LET typ ID LPAREN args RPAREN EQUAL . value [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET typ ID LPAREN args RPAREN EQUAL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN RPAREN 
##
## Ends in an error in state: 11.
##
## func -> LET typ ID LPAREN args RPAREN . EQUAL value [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET typ ID LPAREN args RPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID RPAREN 
##
## Ends in an error in state: 4.
##
## func -> LET typ ID . LPAREN args RPAREN EQUAL value [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET typ ID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID RPAREN 
##
## Ends in an error in state: 3.
##
## func -> LET typ . ID LPAREN args RPAREN EQUAL value [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET typ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET RPAREN 
##
## Ends in an error in state: 1.
##
## func -> LET . typ ID LPAREN args RPAREN EQUAL value [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: RPAREN 
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
## 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

