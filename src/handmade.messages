prog: LET ID ID LPAREN ID ID COMMA TIMES 
##
## Ends in an error in state: 40.
##
## separated_nonempty_list(COMMA,arg) -> arg COMMA . separated_nonempty_list(COMMA,arg) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## arg COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN ID ID TIMES 
##
## Ends in an error in state: 39.
##
## separated_nonempty_list(COMMA,arg) -> arg . [ RPAREN ]
## separated_nonempty_list(COMMA,arg) -> arg . COMMA separated_nonempty_list(COMMA,arg) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## arg 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN ID TIMES 
##
## Ends in an error in state: 6.
##
## arg -> ID . typ [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL IF INT RPAREN 
##
## Ends in an error in state: 17.
##
## value -> value . PLUS value [ TIMES THEN PLUS MINUS LPAREN EQUAL ]
## value -> value . TIMES value [ TIMES THEN PLUS MINUS LPAREN EQUAL ]
## value -> value . MINUS value [ TIMES THEN PLUS MINUS LPAREN EQUAL ]
## value -> value . EQUAL value [ TIMES THEN PLUS MINUS LPAREN EQUAL ]
## value -> value . LPAREN params RPAREN [ TIMES THEN PLUS MINUS LPAREN EQUAL ]
## value -> IF value . THEN value ELSE value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL IF INT THEN INT ELSE INT INT 
##
## Ends in an error in state: 37.
##
## value -> value . PLUS value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . TIMES value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . MINUS value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . EQUAL value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . LPAREN params RPAREN [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> IF value THEN value ELSE value . [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF value THEN value ELSE value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL IF INT THEN INT ELSE TIMES 
##
## Ends in an error in state: 36.
##
## value -> IF value THEN value ELSE . value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF value THEN value ELSE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL IF INT THEN INT THEN 
##
## Ends in an error in state: 35.
##
## value -> value . PLUS value [ TIMES PLUS MINUS LPAREN EQUAL ELSE ]
## value -> value . TIMES value [ TIMES PLUS MINUS LPAREN EQUAL ELSE ]
## value -> value . MINUS value [ TIMES PLUS MINUS LPAREN EQUAL ELSE ]
## value -> value . EQUAL value [ TIMES PLUS MINUS LPAREN EQUAL ELSE ]
## value -> value . LPAREN params RPAREN [ TIMES PLUS MINUS LPAREN EQUAL ELSE ]
## value -> IF value THEN value . ELSE value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF value THEN value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL IF INT THEN TIMES 
##
## Ends in an error in state: 34.
##
## value -> IF value THEN . value ELSE value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF value THEN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL IF TIMES 
##
## Ends in an error in state: 15.
##
## value -> IF . value THEN value ELSE value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT EQUAL INT INT 
##
## Ends in an error in state: 27.
##
## value -> value . PLUS value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . TIMES value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . MINUS value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . EQUAL value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value EQUAL value . [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . LPAREN params RPAREN [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## value EQUAL value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT EQUAL TIMES 
##
## Ends in an error in state: 26.
##
## value -> value EQUAL . value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## value EQUAL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT LPAREN INT COMMA TIMES 
##
## Ends in an error in state: 28.
##
## separated_nonempty_list(COMMA,value) -> value COMMA . separated_nonempty_list(COMMA,value) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## value COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT LPAREN INT THEN 
##
## Ends in an error in state: 25.
##
## separated_nonempty_list(COMMA,value) -> value . [ RPAREN ]
## separated_nonempty_list(COMMA,value) -> value . COMMA separated_nonempty_list(COMMA,value) [ RPAREN ]
## value -> value . PLUS value [ TIMES RPAREN PLUS MINUS LPAREN EQUAL COMMA ]
## value -> value . TIMES value [ TIMES RPAREN PLUS MINUS LPAREN EQUAL COMMA ]
## value -> value . MINUS value [ TIMES RPAREN PLUS MINUS LPAREN EQUAL COMMA ]
## value -> value . EQUAL value [ TIMES RPAREN PLUS MINUS LPAREN EQUAL COMMA ]
## value -> value . LPAREN params RPAREN [ TIMES RPAREN PLUS MINUS LPAREN EQUAL COMMA ]
##
## The known suffix of the stack is as follows:
## value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT LPAREN TIMES 
##
## Ends in an error in state: 24.
##
## value -> value LPAREN . params RPAREN [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## value LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT MINUS INT INT 
##
## Ends in an error in state: 23.
##
## value -> value . PLUS value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . TIMES value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . MINUS value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value MINUS value . [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . EQUAL value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . LPAREN params RPAREN [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## value MINUS value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT MINUS TIMES 
##
## Ends in an error in state: 22.
##
## value -> value MINUS . value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## value MINUS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT PLUS INT INT 
##
## Ends in an error in state: 21.
##
## value -> value . PLUS value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value PLUS value . [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . TIMES value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . MINUS value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . EQUAL value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . LPAREN params RPAREN [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## value PLUS value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT PLUS TIMES 
##
## Ends in an error in state: 20.
##
## value -> value PLUS . value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## value PLUS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT THEN 
##
## Ends in an error in state: 38.
##
## func -> LET typ ID LPAREN args RPAREN EQUAL value . [ LET EOF ]
## value -> value . PLUS value [ TIMES PLUS MINUS LPAREN LET EQUAL EOF ]
## value -> value . TIMES value [ TIMES PLUS MINUS LPAREN LET EQUAL EOF ]
## value -> value . MINUS value [ TIMES PLUS MINUS LPAREN LET EQUAL EOF ]
## value -> value . EQUAL value [ TIMES PLUS MINUS LPAREN LET EQUAL EOF ]
## value -> value . LPAREN params RPAREN [ TIMES PLUS MINUS LPAREN LET EQUAL EOF ]
##
## The known suffix of the stack is as follows:
## LET typ ID LPAREN args RPAREN EQUAL value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT TIMES INT INT 
##
## Ends in an error in state: 19.
##
## value -> value . PLUS value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . TIMES value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value TIMES value . [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . MINUS value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . EQUAL value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
## value -> value . LPAREN params RPAREN [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## value TIMES value 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL INT TIMES TIMES 
##
## Ends in an error in state: 18.
##
## value -> value TIMES . value [ TIMES THEN RPAREN PLUS MINUS LPAREN LET EQUAL EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## value TIMES 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN EQUAL TIMES 
##
## Ends in an error in state: 12.
##
## func -> LET typ ID LPAREN args RPAREN EQUAL . value [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET typ ID LPAREN args RPAREN EQUAL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN RPAREN TIMES 
##
## Ends in an error in state: 11.
##
## func -> LET typ ID LPAREN args RPAREN . EQUAL value [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET typ ID LPAREN args RPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID LPAREN TIMES 
##
## Ends in an error in state: 5.
##
## func -> LET typ ID LPAREN . args RPAREN EQUAL value [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET typ ID LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID ID TIMES 
##
## Ends in an error in state: 4.
##
## func -> LET typ ID . LPAREN args RPAREN EQUAL value [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET typ ID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID TIMES 
##
## Ends in an error in state: 3.
##
## func -> LET typ . ID LPAREN args RPAREN EQUAL value [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET typ 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET TIMES 
##
## Ends in an error in state: 1.
##
## func -> LET . typ ID LPAREN args RPAREN EQUAL value [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TIMES 
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
## 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

